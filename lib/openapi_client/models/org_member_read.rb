=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module OpenapiClient
  class OrgMemberRead
    # Unique id of the account member
    attr_accessor :id

    # Email of the user controlling this account
    attr_accessor :email

    # Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
    attr_accessor :email_verified

    # Name of this user
    attr_accessor :name

    # First name of the user
    attr_accessor :given_name

    # Last name of the user
    attr_accessor :family_name

    # URL to picture, photo, or avatar of the user that controls this account.
    attr_accessor :picture

    # Whether or not this user has special access to permit.io organizations
    attr_accessor :is_superuser

    # Whether or not this user is currently onboarding, needs to be replaced by a user journey object
    attr_accessor :is_onboarding

    # the step the user is currently going through in onboarding
    attr_accessor :onboarding_step

    # Date and time when the account member was created (ISO_8601 format).
    attr_accessor :created_at

    # Last date and time this user logged in (ISO_8601 format).
    attr_accessor :last_login

    # Last IP address from which this user logged in.
    attr_accessor :last_ip

    # Total number of logins this user has performed.
    attr_accessor :logins_count

    attr_accessor :identities

    # Custom permit.io dashboard settings, such as preferred theme, etc.
    attr_accessor :settings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'email' => :'email',
        :'email_verified' => :'email_verified',
        :'name' => :'name',
        :'given_name' => :'given_name',
        :'family_name' => :'family_name',
        :'picture' => :'picture',
        :'is_superuser' => :'is_superuser',
        :'is_onboarding' => :'is_onboarding',
        :'onboarding_step' => :'onboarding_step',
        :'created_at' => :'created_at',
        :'last_login' => :'last_login',
        :'last_ip' => :'last_ip',
        :'logins_count' => :'logins_count',
        :'identities' => :'identities',
        :'settings' => :'settings'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'email' => :'String',
        :'email_verified' => :'Boolean',
        :'name' => :'String',
        :'given_name' => :'String',
        :'family_name' => :'String',
        :'picture' => :'String',
        :'is_superuser' => :'Boolean',
        :'is_onboarding' => :'Boolean',
        :'onboarding_step' => :'OnboardingStep',
        :'created_at' => :'Time',
        :'last_login' => :'Time',
        :'last_ip' => :'String',
        :'logins_count' => :'Integer',
        :'identities' => :'Array<IdentityRead>',
        :'settings' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrgMemberRead` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrgMemberRead`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_verified')
        self.email_verified = attributes[:'email_verified']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'given_name')
        self.given_name = attributes[:'given_name']
      end

      if attributes.key?(:'family_name')
        self.family_name = attributes[:'family_name']
      end

      if attributes.key?(:'picture')
        self.picture = attributes[:'picture']
      end

      if attributes.key?(:'is_superuser')
        self.is_superuser = attributes[:'is_superuser']
      end

      if attributes.key?(:'is_onboarding')
        self.is_onboarding = attributes[:'is_onboarding']
      end

      if attributes.key?(:'onboarding_step')
        self.onboarding_step = attributes[:'onboarding_step']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'last_login')
        self.last_login = attributes[:'last_login']
      end

      if attributes.key?(:'last_ip')
        self.last_ip = attributes[:'last_ip']
      else
        self.last_ip = '0.0.0.0'
      end

      if attributes.key?(:'logins_count')
        self.logins_count = attributes[:'logins_count']
      else
        self.logins_count = 0
      end

      if attributes.key?(:'identities')
        if (value = attributes[:'identities']).is_a?(Array)
          self.identities = value
        end
      end

      if attributes.key?(:'settings')
        self.settings = attributes[:'settings']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @email_verified.nil?
        invalid_properties.push('invalid value for "email_verified", email_verified cannot be nil.')
      end

      if @is_superuser.nil?
        invalid_properties.push('invalid value for "is_superuser", is_superuser cannot be nil.')
      end

      if @is_onboarding.nil?
        invalid_properties.push('invalid value for "is_onboarding", is_onboarding cannot be nil.')
      end

      if @onboarding_step.nil?
        invalid_properties.push('invalid value for "onboarding_step", onboarding_step cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @identities.nil?
        invalid_properties.push('invalid value for "identities", identities cannot be nil.')
      end

      if @settings.nil?
        invalid_properties.push('invalid value for "settings", settings cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @email.nil?
      return false if @email_verified.nil?
      return false if @is_superuser.nil?
      return false if @is_onboarding.nil?
      return false if @onboarding_step.nil?
      return false if @created_at.nil?
      return false if @identities.nil?
      return false if @settings.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          email == o.email &&
          email_verified == o.email_verified &&
          name == o.name &&
          given_name == o.given_name &&
          family_name == o.family_name &&
          picture == o.picture &&
          is_superuser == o.is_superuser &&
          is_onboarding == o.is_onboarding &&
          onboarding_step == o.onboarding_step &&
          created_at == o.created_at &&
          last_login == o.last_login &&
          last_ip == o.last_ip &&
          logins_count == o.logins_count &&
          identities == o.identities &&
          settings == o.settings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, email, email_verified, name, given_name, family_name, picture, is_superuser, is_onboarding, onboarding_step, created_at, last_login, last_ip, logins_count, identities, settings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
