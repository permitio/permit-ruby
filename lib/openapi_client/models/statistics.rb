=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module OpenapiClient
  class Statistics
    attr_accessor :roles

    attr_accessor :users

    attr_accessor :policies

    attr_accessor :resources

    attr_accessor :tenants

    attr_accessor :has_decision_logs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'roles' => :'roles',
        :'users' => :'users',
        :'policies' => :'policies',
        :'resources' => :'resources',
        :'tenants' => :'tenants',
        :'has_decision_logs' => :'has_decision_logs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'roles' => :'Integer',
        :'users' => :'Integer',
        :'policies' => :'Integer',
        :'resources' => :'Integer',
        :'tenants' => :'Integer',
        :'has_decision_logs' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Statistics` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Statistics`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'roles')
        self.roles = attributes[:'roles']
      end

      if attributes.key?(:'users')
        self.users = attributes[:'users']
      end

      if attributes.key?(:'policies')
        self.policies = attributes[:'policies']
      end

      if attributes.key?(:'resources')
        self.resources = attributes[:'resources']
      end

      if attributes.key?(:'tenants')
        self.tenants = attributes[:'tenants']
      end

      if attributes.key?(:'has_decision_logs')
        self.has_decision_logs = attributes[:'has_decision_logs']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @roles.nil?
        invalid_properties.push('invalid value for "roles", roles cannot be nil.')
      end

      if @roles < 0
        invalid_properties.push('invalid value for "roles", must be greater than or equal to 0.')
      end

      if @users.nil?
        invalid_properties.push('invalid value for "users", users cannot be nil.')
      end

      if @users < 0
        invalid_properties.push('invalid value for "users", must be greater than or equal to 0.')
      end

      if @policies.nil?
        invalid_properties.push('invalid value for "policies", policies cannot be nil.')
      end

      if @policies < 0
        invalid_properties.push('invalid value for "policies", must be greater than or equal to 0.')
      end

      if @resources.nil?
        invalid_properties.push('invalid value for "resources", resources cannot be nil.')
      end

      if @resources < 0
        invalid_properties.push('invalid value for "resources", must be greater than or equal to 0.')
      end

      if @tenants.nil?
        invalid_properties.push('invalid value for "tenants", tenants cannot be nil.')
      end

      if @tenants < 0
        invalid_properties.push('invalid value for "tenants", must be greater than or equal to 0.')
      end

      if @has_decision_logs.nil?
        invalid_properties.push('invalid value for "has_decision_logs", has_decision_logs cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @roles.nil?
      return false if @roles < 0
      return false if @users.nil?
      return false if @users < 0
      return false if @policies.nil?
      return false if @policies < 0
      return false if @resources.nil?
      return false if @resources < 0
      return false if @tenants.nil?
      return false if @tenants < 0
      return false if @has_decision_logs.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] roles Value to be assigned
    def roles=(roles)
      if roles.nil?
        fail ArgumentError, 'roles cannot be nil'
      end

      if roles < 0
        fail ArgumentError, 'invalid value for "roles", must be greater than or equal to 0.'
      end

      @roles = roles
    end

    # Custom attribute writer method with validation
    # @param [Object] users Value to be assigned
    def users=(users)
      if users.nil?
        fail ArgumentError, 'users cannot be nil'
      end

      if users < 0
        fail ArgumentError, 'invalid value for "users", must be greater than or equal to 0.'
      end

      @users = users
    end

    # Custom attribute writer method with validation
    # @param [Object] policies Value to be assigned
    def policies=(policies)
      if policies.nil?
        fail ArgumentError, 'policies cannot be nil'
      end

      if policies < 0
        fail ArgumentError, 'invalid value for "policies", must be greater than or equal to 0.'
      end

      @policies = policies
    end

    # Custom attribute writer method with validation
    # @param [Object] resources Value to be assigned
    def resources=(resources)
      if resources.nil?
        fail ArgumentError, 'resources cannot be nil'
      end

      if resources < 0
        fail ArgumentError, 'invalid value for "resources", must be greater than or equal to 0.'
      end

      @resources = resources
    end

    # Custom attribute writer method with validation
    # @param [Object] tenants Value to be assigned
    def tenants=(tenants)
      if tenants.nil?
        fail ArgumentError, 'tenants cannot be nil'
      end

      if tenants < 0
        fail ArgumentError, 'invalid value for "tenants", must be greater than or equal to 0.'
      end

      @tenants = tenants
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          roles == o.roles &&
          users == o.users &&
          policies == o.policies &&
          resources == o.resources &&
          tenants == o.tenants &&
          has_decision_logs == o.has_decision_logs
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [roles, users, policies, resources, tenants, has_decision_logs].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
