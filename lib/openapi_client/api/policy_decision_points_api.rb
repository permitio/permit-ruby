=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class PolicyDecisionPointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get connected PDP configuration and push state
    # Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
    # @param pdp_state_update [PDPStateUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [RemoteConfig]
    def get_authenticating_pdp_config_values(pdp_state_update, opts = {})
      data, _status_code, _headers = get_authenticating_pdp_config_values_with_http_info(pdp_state_update, opts)
      data
    end

    # Get connected PDP configuration and push state
    # Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
    # @param pdp_state_update [PDPStateUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteConfig, Integer, Hash)>] RemoteConfig data, response status code and response headers
    def get_authenticating_pdp_config_values_with_http_info(pdp_state_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.get_authenticating_pdp_config_values ...'
      end
      # verify the required parameter 'pdp_state_update' is set
      if @api_client.config.client_side_validation && pdp_state_update.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_state_update' when calling PolicyDecisionPointsApi.get_authenticating_pdp_config_values"
      end
      # resource path
      local_var_path = '/v2/pdps/me/config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pdp_state_update)

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.get_authenticating_pdp_config_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#get_authenticating_pdp_config_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get connected PDP configuration
    # Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
    # @param [Hash] opts the optional parameters
    # @return [RemoteConfig]
    def get_authenticating_pdp_config_values_legacy(opts = {})
      data, _status_code, _headers = get_authenticating_pdp_config_values_legacy_with_http_info(opts)
      data
    end

    # Get connected PDP configuration
    # Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteConfig, Integer, Hash)>] RemoteConfig data, response status code and response headers
    def get_authenticating_pdp_config_values_legacy_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.get_authenticating_pdp_config_values_legacy ...'
      end
      # resource path
      local_var_path = '/v2/pdps/me/config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.get_authenticating_pdp_config_values_legacy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#get_authenticating_pdp_config_values_legacy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PDP configuration
    # Gets the configuration values for the PDP container with id `pdp_id`.  The config values returned are considered \"overrides\", meaning they are overriding any default values given to the container by the user.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param pdp_id [String] The unique id of the pdp
    # @param [Hash] opts the optional parameters
    # @return [RemoteConfig]
    def get_pdp_config_values(proj_id, env_id, pdp_id, opts = {})
      data, _status_code, _headers = get_pdp_config_values_with_http_info(proj_id, env_id, pdp_id, opts)
      data
    end

    # Get PDP configuration
    # Gets the configuration values for the PDP container with id &#x60;pdp_id&#x60;.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param pdp_id [String] The unique id of the pdp
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteConfig, Integer, Hash)>] RemoteConfig data, response status code and response headers
    def get_pdp_config_values_with_http_info(proj_id, env_id, pdp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.get_pdp_config_values ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyDecisionPointsApi.get_pdp_config_values"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling PolicyDecisionPointsApi.get_pdp_config_values"
      end
      # verify the required parameter 'pdp_id' is set
      if @api_client.config.client_side_validation && pdp_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_id' when calling PolicyDecisionPointsApi.get_pdp_config_values"
      end
      # resource path
      local_var_path = '/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'pdp_id' + '}', CGI.escape(pdp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.get_pdp_config_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#get_pdp_config_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PDP configurations
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<PDPConfigRead>]
    def list_pdp_configs(proj_id, env_id, opts = {})
      data, _status_code, _headers = list_pdp_configs_with_http_info(proj_id, env_id, opts)
      data
    end

    # List PDP configurations
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<PDPConfigRead>, Integer, Hash)>] Array<PDPConfigRead> data, response status code and response headers
    def list_pdp_configs_with_http_info(proj_id, env_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.list_pdp_configs ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyDecisionPointsApi.list_pdp_configs"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling PolicyDecisionPointsApi.list_pdp_configs"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling PolicyDecisionPointsApi.list_pdp_configs, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling PolicyDecisionPointsApi.list_pdp_configs, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling PolicyDecisionPointsApi.list_pdp_configs, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/pdps/{proj_id}/{env_id}/configs'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PDPConfigRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.list_pdp_configs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#list_pdp_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rotate PDP API Key
    # Rotates the API key of the PDP container with id `pdp_id`.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param pdp_id [String] The unique id of the pdp
    # @param [Hash] opts the optional parameters
    # @return [PDPConfigRead]
    def rotate_pdp_api_key(proj_id, env_id, pdp_id, opts = {})
      data, _status_code, _headers = rotate_pdp_api_key_with_http_info(proj_id, env_id, pdp_id, opts)
      data
    end

    # Rotate PDP API Key
    # Rotates the API key of the PDP container with id &#x60;pdp_id&#x60;.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param pdp_id [String] The unique id of the pdp
    # @param [Hash] opts the optional parameters
    # @return [Array<(PDPConfigRead, Integer, Hash)>] PDPConfigRead data, response status code and response headers
    def rotate_pdp_api_key_with_http_info(proj_id, env_id, pdp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyDecisionPointsApi.rotate_pdp_api_key ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyDecisionPointsApi.rotate_pdp_api_key"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling PolicyDecisionPointsApi.rotate_pdp_api_key"
      end
      # verify the required parameter 'pdp_id' is set
      if @api_client.config.client_side_validation && pdp_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdp_id' when calling PolicyDecisionPointsApi.rotate_pdp_api_key"
      end
      # resource path
      local_var_path = '/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'pdp_id' + '}', CGI.escape(pdp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PDPConfigRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyDecisionPointsApi.rotate_pdp_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyDecisionPointsApi#rotate_pdp_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
