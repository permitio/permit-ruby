=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class ConditionSetRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign Set Permissions
    # Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_rule_create [ConditionSetRuleCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ConditionSetRuleRead>]
    def assign_set_permissions(proj_id, env_id, condition_set_rule_create, opts = {})
      data, _status_code, _headers = assign_set_permissions_with_http_info(proj_id, env_id, condition_set_rule_create, opts)
      data
    end

    # Assign Set Permissions
    # Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_rule_create [ConditionSetRuleCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ConditionSetRuleRead>, Integer, Hash)>] Array<ConditionSetRuleRead> data, response status code and response headers
    def assign_set_permissions_with_http_info(proj_id, env_id, condition_set_rule_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetRulesApi.assign_set_permissions ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetRulesApi.assign_set_permissions"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetRulesApi.assign_set_permissions"
      end
      # verify the required parameter 'condition_set_rule_create' is set
      if @api_client.config.client_side_validation && condition_set_rule_create.nil?
        fail ArgumentError, "Missing the required parameter 'condition_set_rule_create' when calling ConditionSetRulesApi.assign_set_permissions"
      end
      # resource path
      local_var_path = '/v2/facts/{proj_id}/{env_id}/set_rules'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(condition_set_rule_create)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ConditionSetRuleRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetRulesApi.assign_set_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetRulesApi#assign_set_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Set Permissions
    # Lists the condition set rules matching the filter. - If the `user_set` filter is present, will only return the permissions set of that user set. - If the `permission` filter is present, will only return the permissions sets that equals to the queried permission. - If the `resource_set` filter is present, will only return the permissions set of that resource set.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_set optional user set filter, will only return rules where the permission is granted to this user set
    # @option opts [String] :permission optional permission filter, will only return condition set rules granting this permission
    # @option opts [String] :resource_set optional resource set filter, will only return rules where the permission is granted on this resource set
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<ConditionSetRuleRead>]
    def list_set_permissions(proj_id, env_id, opts = {})
      data, _status_code, _headers = list_set_permissions_with_http_info(proj_id, env_id, opts)
      data
    end

    # List Set Permissions
    # Lists the condition set rules matching the filter. - If the &#x60;user_set&#x60; filter is present, will only return the permissions set of that user set. - If the &#x60;permission&#x60; filter is present, will only return the permissions sets that equals to the queried permission. - If the &#x60;resource_set&#x60; filter is present, will only return the permissions set of that resource set.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_set optional user set filter, will only return rules where the permission is granted to this user set
    # @option opts [String] :permission optional permission filter, will only return condition set rules granting this permission
    # @option opts [String] :resource_set optional resource set filter, will only return rules where the permission is granted on this resource set
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<ConditionSetRuleRead>, Integer, Hash)>] Array<ConditionSetRuleRead> data, response status code and response headers
    def list_set_permissions_with_http_info(proj_id, env_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetRulesApi.list_set_permissions ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetRulesApi.list_set_permissions"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetRulesApi.list_set_permissions"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConditionSetRulesApi.list_set_permissions, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConditionSetRulesApi.list_set_permissions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConditionSetRulesApi.list_set_permissions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/facts/{proj_id}/{env_id}/set_rules'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_set'] = opts[:'user_set'] if !opts[:'user_set'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'resource_set'] = opts[:'resource_set'] if !opts[:'resource_set'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ConditionSetRuleRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetRulesApi.list_set_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetRulesApi#list_set_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unassign Set Permissions
    # Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_rule_remove [ConditionSetRuleRemove] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unassign_set_permissions(proj_id, env_id, condition_set_rule_remove, opts = {})
      unassign_set_permissions_with_http_info(proj_id, env_id, condition_set_rule_remove, opts)
      nil
    end

    # Unassign Set Permissions
    # Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_rule_remove [ConditionSetRuleRemove] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unassign_set_permissions_with_http_info(proj_id, env_id, condition_set_rule_remove, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetRulesApi.unassign_set_permissions ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetRulesApi.unassign_set_permissions"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetRulesApi.unassign_set_permissions"
      end
      # verify the required parameter 'condition_set_rule_remove' is set
      if @api_client.config.client_side_validation && condition_set_rule_remove.nil?
        fail ArgumentError, "Missing the required parameter 'condition_set_rule_remove' when calling ConditionSetRulesApi.unassign_set_permissions"
      end
      # resource path
      local_var_path = '/v2/facts/{proj_id}/{env_id}/set_rules'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(condition_set_rule_remove)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetRulesApi.unassign_set_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetRulesApi#unassign_set_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
