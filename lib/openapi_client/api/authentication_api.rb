=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class AuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # (DEV MODE) Login
    # The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.
    # @param dev_login [DevLogin] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dev_login(dev_login, opts = {})
      dev_login_with_http_info(dev_login, opts)
      nil
    end

    # (DEV MODE) Login
    # The dev-login endpoints allows a developer inside permit.io to log in with an email address.  THIS IS ONLY AVAILABLE IN DEV MODE.
    # @param dev_login [DevLogin] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dev_login_with_http_info(dev_login, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.dev_login ...'
      end
      # verify the required parameter 'dev_login' is set
      if @api_client.config.client_side_validation && dev_login.nil?
        fail ArgumentError, "Missing the required parameter 'dev_login' when calling AuthenticationApi.dev_login"
      end
      # resource path
      local_var_path = '/v2/auth/devlogin'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(dev_login)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthenticationApi.dev_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#dev_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Elements Login As
    # @param user_login_request_input [UserLoginRequestInput] 
    # @param [Hash] opts the optional parameters
    # @return [EmbeddedLoginRequestOutput]
    def elements_login_as(user_login_request_input, opts = {})
      data, _status_code, _headers = elements_login_as_with_http_info(user_login_request_input, opts)
      data
    end

    # Elements Login As
    # @param user_login_request_input [UserLoginRequestInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmbeddedLoginRequestOutput, Integer, Hash)>] EmbeddedLoginRequestOutput data, response status code and response headers
    def elements_login_as_with_http_info(user_login_request_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.elements_login_as ...'
      end
      # verify the required parameter 'user_login_request_input' is set
      if @api_client.config.client_side_validation && user_login_request_input.nil?
        fail ArgumentError, "Missing the required parameter 'user_login_request_input' when calling AuthenticationApi.elements_login_as"
      end
      # resource path
      local_var_path = '/v2/auth/elements_login_as'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_login_request_input)

      # return_type
      return_type = opts[:debug_return_type] || 'EmbeddedLoginRequestOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.elements_login_as",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#elements_login_as\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :invite_code An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.
    # @return [LoginResult]
    def login(opts = {})
      data, _status_code, _headers = login_with_http_info(opts)
      data
    end

    # Login
    # The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :invite_code An optional invite code to an existing organization. If the invite code is provided and is valid, the member will gain access to that organization.
    # @return [Array<(LoginResult, Integer, Hash)>] LoginResult data, response status code and response headers
    def login_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.login ...'
      end
      # resource path
      local_var_path = '/v2/auth/login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'invite_code'] = opts[:'invite_code'] if !opts[:'invite_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LoginResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login Elements
    # The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [LoginResult]
    def login_elements(token, opts = {})
      data, _status_code, _headers = login_elements_with_http_info(token, opts)
      data
    end

    # Login Elements
    # The login endpoint allows the frontend app to exchange a user JWT with a user session. The user session is stored on an httpOnly + secure cookie.
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoginResult, Integer, Hash)>] LoginResult data, response status code and response headers
    def login_elements_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.login_elements ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AuthenticationApi.login_elements"
      end
      # resource path
      local_var_path = '/v2/auth/login_elements'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LoginResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthenticationApi.login_elements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#login_elements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout Get
    # The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def logout_get(opts = {})
      logout_get_with_http_info(opts)
      nil
    end

    # Logout Get
    # The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logout_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.logout_get ...'
      end
      # resource path
      local_var_path = '/v2/auth/logout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthenticationApi.logout_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#logout_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Logout Post
    # The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def logout_post(opts = {})
      logout_post_with_http_info(opts)
      nil
    end

    # Logout Post
    # The logout endpoint deletes the session cookie of a logged in user and invalidates cached VCs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def logout_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.logout_post ...'
      end
      # resource path
      local_var_path = '/v2/auth/logout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthenticationApi.logout_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#logout_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Me
    # @param [Hash] opts the optional parameters
    # @return [AuthnMeRead]
    def me(opts = {})
      data, _status_code, _headers = me_with_http_info(opts)
      data
    end

    # Me
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthnMeRead, Integer, Hash)>] AuthnMeRead data, response status code and response headers
    def me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.me ...'
      end
      # resource path
      local_var_path = '/v2/auth/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthnMeRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.me",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Switch Organization
    # Allows the user to switch his active organization (manipulates the user's login session).  This route will return a new login cookie to the user.
    # @param org_id [String] the organization id the user wishes to switch to as the active org on the session
    # @param [Hash] opts the optional parameters
    # @return [LoginResult]
    def switch_organization(org_id, opts = {})
      data, _status_code, _headers = switch_organization_with_http_info(org_id, opts)
      data
    end

    # Switch Organization
    # Allows the user to switch his active organization (manipulates the user&#39;s login session).  This route will return a new login cookie to the user.
    # @param org_id [String] the organization id the user wishes to switch to as the active org on the session
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoginResult, Integer, Hash)>] LoginResult data, response status code and response headers
    def switch_organization_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.switch_organization ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AuthenticationApi.switch_organization"
      end
      # resource path
      local_var_path = '/v2/auth/switch_org/{org_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LoginResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthenticationApi.switch_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#switch_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
