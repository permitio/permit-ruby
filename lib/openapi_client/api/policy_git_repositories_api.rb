=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class PolicyGitRepositoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate Policy Repo
    # Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param repo_id [String] Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [ProjectRead]
    def activate_policy_repo(proj_id, repo_id, opts = {})
      data, _status_code, _headers = activate_policy_repo_with_http_info(proj_id, repo_id, opts)
      data
    end

    # Activate Policy Repo
    # Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param repo_id [String] Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectRead, Integer, Hash)>] ProjectRead data, response status code and response headers
    def activate_policy_repo_with_http_info(proj_id, repo_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGitRepositoriesApi.activate_policy_repo ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyGitRepositoriesApi.activate_policy_repo"
      end
      # verify the required parameter 'repo_id' is set
      if @api_client.config.client_side_validation && repo_id.nil?
        fail ArgumentError, "Missing the required parameter 'repo_id' when calling PolicyGitRepositoriesApi.activate_policy_repo"
      end
      # resource path
      local_var_path = '/v2/projects/{proj_id}/repos/{repo_id}/activate'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'repo_id' + '}', CGI.escape(repo_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyGitRepositoriesApi.activate_policy_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGitRepositoriesApi#activate_policy_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Policy Repo
    # Creates a new policy repository configuration under a given project. The given repository is created with status 'pending', it will be changed and used as the 'active' repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param policy_repo_create [PolicyRepoCreate] 
    # @param [Hash] opts the optional parameters
    # @return [PolicyRepoRead]
    def create_policy_repo(proj_id, policy_repo_create, opts = {})
      data, _status_code, _headers = create_policy_repo_with_http_info(proj_id, policy_repo_create, opts)
      data
    end

    # Create Policy Repo
    # Creates a new policy repository configuration under a given project. The given repository is created with status &#39;pending&#39;, it will be changed and used as the &#39;active&#39; repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param policy_repo_create [PolicyRepoCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyRepoRead, Integer, Hash)>] PolicyRepoRead data, response status code and response headers
    def create_policy_repo_with_http_info(proj_id, policy_repo_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGitRepositoriesApi.create_policy_repo ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyGitRepositoriesApi.create_policy_repo"
      end
      # verify the required parameter 'policy_repo_create' is set
      if @api_client.config.client_side_validation && policy_repo_create.nil?
        fail ArgumentError, "Missing the required parameter 'policy_repo_create' when calling PolicyGitRepositoriesApi.create_policy_repo"
      end
      # resource path
      local_var_path = '/v2/projects/{proj_id}/repos'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(policy_repo_create)

      # return_type
      return_type = opts[:debug_return_type] || 'PolicyRepoRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyGitRepositoriesApi.create_policy_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGitRepositoriesApi#create_policy_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Policy Repo
    # Deletes an environment and all its related data.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param repo_id [String] Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy_repo(proj_id, repo_id, opts = {})
      delete_policy_repo_with_http_info(proj_id, repo_id, opts)
      nil
    end

    # Delete Policy Repo
    # Deletes an environment and all its related data.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param repo_id [String] Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_policy_repo_with_http_info(proj_id, repo_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGitRepositoriesApi.delete_policy_repo ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyGitRepositoriesApi.delete_policy_repo"
      end
      # verify the required parameter 'repo_id' is set
      if @api_client.config.client_side_validation && repo_id.nil?
        fail ArgumentError, "Missing the required parameter 'repo_id' when calling PolicyGitRepositoriesApi.delete_policy_repo"
      end
      # resource path
      local_var_path = '/v2/projects/{proj_id}/repos/{repo_id}'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'repo_id' + '}', CGI.escape(repo_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyGitRepositoriesApi.delete_policy_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGitRepositoriesApi#delete_policy_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Active Policy Repo
    # Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [ProjectRead]
    def disable_active_policy_repo(proj_id, opts = {})
      data, _status_code, _headers = disable_active_policy_repo_with_http_info(proj_id, opts)
      data
    end

    # Disable Active Policy Repo
    # Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectRead, Integer, Hash)>] ProjectRead data, response status code and response headers
    def disable_active_policy_repo_with_http_info(proj_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGitRepositoriesApi.disable_active_policy_repo ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyGitRepositoriesApi.disable_active_policy_repo"
      end
      # resource path
      local_var_path = '/v2/projects/{proj_id}/repos/disable'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyGitRepositoriesApi.disable_active_policy_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGitRepositoriesApi#disable_active_policy_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Active Policy Repo
    # Gets the currently active repository, if such repository exists.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [PolicyRepoRead]
    def get_active_policy_repo(proj_id, opts = {})
      data, _status_code, _headers = get_active_policy_repo_with_http_info(proj_id, opts)
      data
    end

    # Get Active Policy Repo
    # Gets the currently active repository, if such repository exists.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyRepoRead, Integer, Hash)>] PolicyRepoRead data, response status code and response headers
    def get_active_policy_repo_with_http_info(proj_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGitRepositoriesApi.get_active_policy_repo ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyGitRepositoriesApi.get_active_policy_repo"
      end
      # resource path
      local_var_path = '/v2/projects/{proj_id}/repos/active'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PolicyRepoRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyGitRepositoriesApi.get_active_policy_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGitRepositoriesApi#get_active_policy_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Policy Repo
    # Gets a single repository matching the given repo_id, if such repository exists.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param repo_id [String] Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [PolicyRepoRead]
    def get_policy_repo(proj_id, repo_id, opts = {})
      data, _status_code, _headers = get_policy_repo_with_http_info(proj_id, repo_id, opts)
      data
    end

    # Get Policy Repo
    # Gets a single repository matching the given repo_id, if such repository exists.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param repo_id [String] Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyRepoRead, Integer, Hash)>] PolicyRepoRead data, response status code and response headers
    def get_policy_repo_with_http_info(proj_id, repo_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGitRepositoriesApi.get_policy_repo ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyGitRepositoriesApi.get_policy_repo"
      end
      # verify the required parameter 'repo_id' is set
      if @api_client.config.client_side_validation && repo_id.nil?
        fail ArgumentError, "Missing the required parameter 'repo_id' when calling PolicyGitRepositoriesApi.get_policy_repo"
      end
      # resource path
      local_var_path = '/v2/projects/{proj_id}/repos/{repo_id}'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'repo_id' + '}', CGI.escape(repo_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PolicyRepoRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyGitRepositoriesApi.get_policy_repo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGitRepositoriesApi#get_policy_repo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Policy Repos
    # Lists all the policy repositories under a given project.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<PolicyRepoRead>]
    def list_policy_repos(proj_id, opts = {})
      data, _status_code, _headers = list_policy_repos_with_http_info(proj_id, opts)
      data
    end

    # List Policy Repos
    # Lists all the policy repositories under a given project.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<PolicyRepoRead>, Integer, Hash)>] Array<PolicyRepoRead> data, response status code and response headers
    def list_policy_repos_with_http_info(proj_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyGitRepositoriesApi.list_policy_repos ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling PolicyGitRepositoriesApi.list_policy_repos"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling PolicyGitRepositoriesApi.list_policy_repos, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling PolicyGitRepositoriesApi.list_policy_repos, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling PolicyGitRepositoriesApi.list_policy_repos, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/projects/{proj_id}/repos'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PolicyRepoRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"PolicyGitRepositoriesApi.list_policy_repos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyGitRepositoriesApi#list_policy_repos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
