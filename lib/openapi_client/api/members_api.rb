=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class MembersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Organization Member
    # Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE `/orgs/{org}`.
    # @param member_id [String] Either the unique id (UUID) of the account member, or the email address of the account member.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_organization_member(member_id, opts = {})
      delete_organization_member_with_http_info(member_id, opts)
      nil
    end

    # Delete Organization Member
    # Deletes an account member matching the given id or email address. The member will be removed from the active account in permit.io.  If the member is the only member in its account (organization), returns 400 (bad request), due to nobody remains with access to the account, meaning deletion of the entire account (org). To completely remove an account, call DELETE &#x60;/orgs/{org}&#x60;.
    # @param member_id [String] Either the unique id (UUID) of the account member, or the email address of the account member.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_organization_member_with_http_info(member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.delete_organization_member ...'
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling MembersApi.delete_organization_member"
      end
      # resource path
      local_var_path = '/v2/members/{member_id}'.sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"MembersApi.delete_organization_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#delete_organization_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the authenticated account member
    # Gets the authenticated account member's details.
    # @param [Hash] opts the optional parameters
    # @return [OrgMemberRead]
    def get_authenticated_member(opts = {})
      data, _status_code, _headers = get_authenticated_member_with_http_info(opts)
      data
    end

    # Get the authenticated account member
    # Gets the authenticated account member&#39;s details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgMemberRead, Integer, Hash)>] OrgMemberRead data, response status code and response headers
    def get_authenticated_member_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.get_authenticated_member ...'
      end
      # resource path
      local_var_path = '/v2/members/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgMemberRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"MembersApi.get_authenticated_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#get_authenticated_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization Member
    # Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
    # @param member_id [String] Either the unique id (UUID) of the account member, or the email address of the account member.
    # @param [Hash] opts the optional parameters
    # @return [OrgMemberRead]
    def get_organization_member(member_id, opts = {})
      data, _status_code, _headers = get_organization_member_with_http_info(member_id, opts)
      data
    end

    # Get Organization Member
    # Gets a single account member by its id or email address. matching the given member, if no such member exists under the current active account (organization), returns 404.
    # @param member_id [String] Either the unique id (UUID) of the account member, or the email address of the account member.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgMemberRead, Integer, Hash)>] OrgMemberRead data, response status code and response headers
    def get_organization_member_with_http_info(member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.get_organization_member ...'
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling MembersApi.get_organization_member"
      end
      # resource path
      local_var_path = '/v2/members/{member_id}'.sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgMemberRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"MembersApi.get_organization_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#get_organization_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Organization Members
    # Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<OrgMemberRead>]
    def list_organization_members(opts = {})
      data, _status_code, _headers = list_organization_members_with_http_info(opts)
      data
    end

    # List Organization Members
    # Lists all the account members that have access to the current active account. The active account/organization is determined by the API Key used or by the authenticated session id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<OrgMemberRead>, Integer, Hash)>] Array<OrgMemberRead> data, response status code and response headers
    def list_organization_members_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.list_organization_members ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MembersApi.list_organization_members, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling MembersApi.list_organization_members, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling MembersApi.list_organization_members, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/members'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrgMemberRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"MembersApi.list_organization_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#list_organization_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Organization Member
    # Updates an account member's settings.
    # @param member_id [String] Either the unique id (UUID) of the account member, or the email address of the account member.
    # @param org_member_update [OrgMemberUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [OrgMemberRead]
    def update_organization_member(member_id, org_member_update, opts = {})
      data, _status_code, _headers = update_organization_member_with_http_info(member_id, org_member_update, opts)
      data
    end

    # Update Organization Member
    # Updates an account member&#39;s settings.
    # @param member_id [String] Either the unique id (UUID) of the account member, or the email address of the account member.
    # @param org_member_update [OrgMemberUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgMemberRead, Integer, Hash)>] OrgMemberRead data, response status code and response headers
    def update_organization_member_with_http_info(member_id, org_member_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.update_organization_member ...'
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling MembersApi.update_organization_member"
      end
      # verify the required parameter 'org_member_update' is set
      if @api_client.config.client_side_validation && org_member_update.nil?
        fail ArgumentError, "Missing the required parameter 'org_member_update' when calling MembersApi.update_organization_member"
      end
      # resource path
      local_var_path = '/v2/members/{member_id}'.sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(org_member_update)

      # return_type
      return_type = opts[:debug_return_type] || 'OrgMemberRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"MembersApi.update_organization_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#update_organization_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
