=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class OPALDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get All Data
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :__internal_update_cache  (default to false)
    # @return [FullData]
    def get_all_data(org_id, proj_id, env_id, opts = {})
      data, _status_code, _headers = get_all_data_with_http_info(org_id, proj_id, env_id, opts)
      data
    end

    # Get All Data
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :__internal_update_cache  (default to false)
    # @return [Array<(FullData, Integer, Hash)>] FullData data, response status code and response headers
    def get_all_data_with_http_info(org_id, proj_id, env_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OPALDataApi.get_all_data ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OPALDataApi.get_all_data"
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling OPALDataApi.get_all_data"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling OPALDataApi.get_all_data"
      end
      # resource path
      local_var_path = '/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s)).sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'__internal_update_cache'] = opts[:'__internal_update_cache'] if !opts[:'__internal_update_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FullData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OPALDataApi.get_all_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OPALDataApi#get_all_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Data For Role
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [RoleData]
    def get_data_for_role(org_id, proj_id, env_id, role_id, opts = {})
      data, _status_code, _headers = get_data_for_role_with_http_info(org_id, proj_id, env_id, role_id, opts)
      data
    end

    # Get Data For Role
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param role_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleData, Integer, Hash)>] RoleData data, response status code and response headers
    def get_data_for_role_with_http_info(org_id, proj_id, env_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OPALDataApi.get_data_for_role ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OPALDataApi.get_data_for_role"
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling OPALDataApi.get_data_for_role"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling OPALDataApi.get_data_for_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling OPALDataApi.get_data_for_role"
      end
      # resource path
      local_var_path = '/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/roles/{role_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s)).sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoleData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OPALDataApi.get_data_for_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OPALDataApi#get_data_for_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Data For Set Rule
    # return permission assignment data between user sets and resource sets (i.e: condition set rules data)
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param user_set_id [String] 
    # @param resource_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def get_data_for_set_rule(org_id, proj_id, env_id, user_set_id, resource_set_id, opts = {})
      data, _status_code, _headers = get_data_for_set_rule_with_http_info(org_id, proj_id, env_id, user_set_id, resource_set_id, opts)
      data
    end

    # Get Data For Set Rule
    # return permission assignment data between user sets and resource sets (i.e: condition set rules data)
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param user_set_id [String] 
    # @param resource_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Integer, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def get_data_for_set_rule_with_http_info(org_id, proj_id, env_id, user_set_id, resource_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OPALDataApi.get_data_for_set_rule ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OPALDataApi.get_data_for_set_rule"
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling OPALDataApi.get_data_for_set_rule"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling OPALDataApi.get_data_for_set_rule"
      end
      # verify the required parameter 'user_set_id' is set
      if @api_client.config.client_side_validation && user_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_set_id' when calling OPALDataApi.get_data_for_set_rule"
      end
      # verify the required parameter 'resource_set_id' is set
      if @api_client.config.client_side_validation && resource_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_set_id' when calling OPALDataApi.get_data_for_set_rule"
      end
      # resource path
      local_var_path = '/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/condition_set_rules/{user_set_id}/{resource_set_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s)).sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'user_set_id' + '}', CGI.escape(user_set_id.to_s)).sub('{' + 'resource_set_id' + '}', CGI.escape(resource_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Array<String>>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OPALDataApi.get_data_for_set_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OPALDataApi#get_data_for_set_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Data For User
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [UserData]
    def get_data_for_user(org_id, proj_id, env_id, user_id, opts = {})
      data, _status_code, _headers = get_data_for_user_with_http_info(org_id, proj_id, env_id, user_id, opts)
      data
    end

    # Get Data For User
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserData, Integer, Hash)>] UserData data, response status code and response headers
    def get_data_for_user_with_http_info(org_id, proj_id, env_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OPALDataApi.get_data_for_user ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OPALDataApi.get_data_for_user"
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling OPALDataApi.get_data_for_user"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling OPALDataApi.get_data_for_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling OPALDataApi.get_data_for_user"
      end
      # resource path
      local_var_path = '/v2/internal/opal_data/{org_id}/{proj_id}/{env_id}/users/{user_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s)).sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OPALDataApi.get_data_for_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OPALDataApi#get_data_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
