=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class ConditionSetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Condition Set
    # Creates a new condition set (can be either a user set or a resource set).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_create [ConditionSetCreate] 
    # @param [Hash] opts the optional parameters
    # @return [ConditionSetRead]
    def create_condition_set(proj_id, env_id, condition_set_create, opts = {})
      data, _status_code, _headers = create_condition_set_with_http_info(proj_id, env_id, condition_set_create, opts)
      data
    end

    # Create Condition Set
    # Creates a new condition set (can be either a user set or a resource set).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_create [ConditionSetCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConditionSetRead, Integer, Hash)>] ConditionSetRead data, response status code and response headers
    def create_condition_set_with_http_info(proj_id, env_id, condition_set_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetsApi.create_condition_set ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetsApi.create_condition_set"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetsApi.create_condition_set"
      end
      # verify the required parameter 'condition_set_create' is set
      if @api_client.config.client_side_validation && condition_set_create.nil?
        fail ArgumentError, "Missing the required parameter 'condition_set_create' when calling ConditionSetsApi.create_condition_set"
      end
      # resource path
      local_var_path = '/v2/schema/{proj_id}/{env_id}/condition_sets'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(condition_set_create)

      # return_type
      return_type = opts[:debug_return_type] || 'ConditionSetRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetsApi.create_condition_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetsApi#create_condition_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Condition Set
    # Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_id [String] Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_condition_set(proj_id, env_id, condition_set_id, opts = {})
      delete_condition_set_with_http_info(proj_id, env_id, condition_set_id, opts)
      nil
    end

    # Delete Condition Set
    # Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_id [String] Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_condition_set_with_http_info(proj_id, env_id, condition_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetsApi.delete_condition_set ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetsApi.delete_condition_set"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetsApi.delete_condition_set"
      end
      # verify the required parameter 'condition_set_id' is set
      if @api_client.config.client_side_validation && condition_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'condition_set_id' when calling ConditionSetsApi.delete_condition_set"
      end
      # resource path
      local_var_path = '/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'condition_set_id' + '}', CGI.escape(condition_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetsApi.delete_condition_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetsApi#delete_condition_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Condition Set
    # Gets a single condition set, if such condition set exists.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_id [String] Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [ConditionSetRead]
    def get_condition_set(proj_id, env_id, condition_set_id, opts = {})
      data, _status_code, _headers = get_condition_set_with_http_info(proj_id, env_id, condition_set_id, opts)
      data
    end

    # Get Condition Set
    # Gets a single condition set, if such condition set exists.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_id [String] Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConditionSetRead, Integer, Hash)>] ConditionSetRead data, response status code and response headers
    def get_condition_set_with_http_info(proj_id, env_id, condition_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetsApi.get_condition_set ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetsApi.get_condition_set"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetsApi.get_condition_set"
      end
      # verify the required parameter 'condition_set_id' is set
      if @api_client.config.client_side_validation && condition_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'condition_set_id' when calling ConditionSetsApi.get_condition_set"
      end
      # resource path
      local_var_path = '/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'condition_set_id' + '}', CGI.escape(condition_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConditionSetRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetsApi.get_condition_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetsApi#get_condition_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Condition Sets
    # Lists all condition sets matching a filter.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [ConditionSetType] :type if provided, will return only the condition sets of the specified type. e.g: only user sets.
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<ConditionSetRead>]
    def list_condition_sets(proj_id, env_id, opts = {})
      data, _status_code, _headers = list_condition_sets_with_http_info(proj_id, env_id, opts)
      data
    end

    # List Condition Sets
    # Lists all condition sets matching a filter.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [ConditionSetType] :type if provided, will return only the condition sets of the specified type. e.g: only user sets.
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<ConditionSetRead>, Integer, Hash)>] Array<ConditionSetRead> data, response status code and response headers
    def list_condition_sets_with_http_info(proj_id, env_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetsApi.list_condition_sets ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetsApi.list_condition_sets"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetsApi.list_condition_sets"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConditionSetsApi.list_condition_sets, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConditionSetsApi.list_condition_sets, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConditionSetsApi.list_condition_sets, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/schema/{proj_id}/{env_id}/condition_sets'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ConditionSetRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetsApi.list_condition_sets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetsApi#list_condition_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Condition Set
    # Partially updates a condition set. Fields that will be provided will be completely overwritten.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_id [String] Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
    # @param condition_set_update [ConditionSetUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [ConditionSetRead]
    def update_condition_set(proj_id, env_id, condition_set_id, condition_set_update, opts = {})
      data, _status_code, _headers = update_condition_set_with_http_info(proj_id, env_id, condition_set_id, condition_set_update, opts)
      data
    end

    # Update Condition Set
    # Partially updates a condition set. Fields that will be provided will be completely overwritten.
    # @param proj_id [String] Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
    # @param env_id [String] Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
    # @param condition_set_id [String] Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
    # @param condition_set_update [ConditionSetUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConditionSetRead, Integer, Hash)>] ConditionSetRead data, response status code and response headers
    def update_condition_set_with_http_info(proj_id, env_id, condition_set_id, condition_set_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConditionSetsApi.update_condition_set ...'
      end
      # verify the required parameter 'proj_id' is set
      if @api_client.config.client_side_validation && proj_id.nil?
        fail ArgumentError, "Missing the required parameter 'proj_id' when calling ConditionSetsApi.update_condition_set"
      end
      # verify the required parameter 'env_id' is set
      if @api_client.config.client_side_validation && env_id.nil?
        fail ArgumentError, "Missing the required parameter 'env_id' when calling ConditionSetsApi.update_condition_set"
      end
      # verify the required parameter 'condition_set_id' is set
      if @api_client.config.client_side_validation && condition_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'condition_set_id' when calling ConditionSetsApi.update_condition_set"
      end
      # verify the required parameter 'condition_set_update' is set
      if @api_client.config.client_side_validation && condition_set_update.nil?
        fail ArgumentError, "Missing the required parameter 'condition_set_update' when calling ConditionSetsApi.update_condition_set"
      end
      # resource path
      local_var_path = '/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}'.sub('{' + 'proj_id' + '}', CGI.escape(proj_id.to_s)).sub('{' + 'env_id' + '}', CGI.escape(env_id.to_s)).sub('{' + 'condition_set_id' + '}', CGI.escape(condition_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(condition_set_update)

      # return_type
      return_type = opts[:debug_return_type] || 'ConditionSetRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"ConditionSetsApi.update_condition_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConditionSetsApi#update_condition_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
