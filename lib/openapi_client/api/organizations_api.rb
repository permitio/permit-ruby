=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel Invite
    # Cancels an invite that was sent to a new member.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param invite_id [String] Id of the invite to cancel
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_invite(org_id, invite_id, opts = {})
      cancel_invite_with_http_info(org_id, invite_id, opts)
      nil
    end

    # Cancel Invite
    # Cancels an invite that was sent to a new member.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param invite_id [String] Id of the invite to cancel
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_invite_with_http_info(org_id, invite_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.cancel_invite ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.cancel_invite"
      end
      # verify the required parameter 'invite_id' is set
      if @api_client.config.client_side_validation && invite_id.nil?
        fail ArgumentError, "Missing the required parameter 'invite_id' when calling OrganizationsApi.cancel_invite"
      end
      # resource path
      local_var_path = '/v2/orgs/{org_id}/invites/{invite_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s)).sub('{' + 'invite_id' + '}', CGI.escape(invite_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.cancel_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#cancel_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Organization
    # Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
    # @param organization_create [OrganizationCreate] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationReadWithAPIKey]
    def create_organization(organization_create, opts = {})
      data, _status_code, _headers = create_organization_with_http_info(organization_create, opts)
      data
    end

    # Create Organization
    # Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
    # @param organization_create [OrganizationCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationReadWithAPIKey, Integer, Hash)>] OrganizationReadWithAPIKey data, response status code and response headers
    def create_organization_with_http_info(organization_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization ...'
      end
      # verify the required parameter 'organization_create' is set
      if @api_client.config.client_side_validation && organization_create.nil?
        fail ArgumentError, "Missing the required parameter 'organization_create' when calling OrganizationsApi.create_organization"
      end
      # resource path
      local_var_path = '/v2/orgs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization_create)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationReadWithAPIKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.create_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Organization
    # Deletes an organization (Permit.io account) and all its related data.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_organization(org_id, opts = {})
      delete_organization_with_http_info(org_id, opts)
      nil
    end

    # Delete Organization
    # Deletes an organization (Permit.io account) and all its related data.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_organization_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.delete_organization"
      end
      # resource path
      local_var_path = '/v2/orgs/{org_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.delete_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Active Organization
    # Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
    # @param [Hash] opts the optional parameters
    # @return [OrganizationRead]
    def get_active_organization(opts = {})
      data, _status_code, _headers = get_active_organization_with_http_info(opts)
      data
    end

    # Get Active Organization
    # Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationRead, Integer, Hash)>] OrganizationRead data, response status code and response headers
    def get_active_organization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_active_organization ...'
      end
      # resource path
      local_var_path = '/v2/orgs/active/org'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_active_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_active_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Organization
    # Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [OrganizationRead]
    def get_organization(org_id, opts = {})
      data, _status_code, _headers = get_organization_with_http_info(org_id, opts)
      data
    end

    # Get Organization
    # Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationRead, Integer, Hash)>] OrganizationRead data, response status code and response headers
    def get_organization_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.get_organization"
      end
      # resource path
      local_var_path = '/v2/orgs/{org_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.get_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite Members To Organization
    # Invite new members into the organization.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param invite_create [Array<InviteCreate>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inviter_name 
    # @option opts [String] :inviter_email 
    # @return [MultiInviteResult]
    def invite_members_to_organization(org_id, invite_create, opts = {})
      data, _status_code, _headers = invite_members_to_organization_with_http_info(org_id, invite_create, opts)
      data
    end

    # Invite Members To Organization
    # Invite new members into the organization.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param invite_create [Array<InviteCreate>] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inviter_name 
    # @option opts [String] :inviter_email 
    # @return [Array<(MultiInviteResult, Integer, Hash)>] MultiInviteResult data, response status code and response headers
    def invite_members_to_organization_with_http_info(org_id, invite_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.invite_members_to_organization ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.invite_members_to_organization"
      end
      # verify the required parameter 'invite_create' is set
      if @api_client.config.client_side_validation && invite_create.nil?
        fail ArgumentError, "Missing the required parameter 'invite_create' when calling OrganizationsApi.invite_members_to_organization"
      end
      # resource path
      local_var_path = '/v2/orgs/{org_id}/invites'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inviter_name'] = opts[:'inviter_name'] if !opts[:'inviter_name'].nil?
      query_params[:'inviter_email'] = opts[:'inviter_email'] if !opts[:'inviter_email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(invite_create)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiInviteResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.invite_members_to_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#invite_members_to_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Organization Invites
    # Lists pending organization invites
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<InviteRead>]
    def list_organization_invites(org_id, opts = {})
      data, _status_code, _headers = list_organization_invites_with_http_info(org_id, opts)
      data
    end

    # List Organization Invites
    # Lists pending organization invites
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<InviteRead>, Integer, Hash)>] Array<InviteRead> data, response status code and response headers
    def list_organization_invites_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.list_organization_invites ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.list_organization_invites"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling OrganizationsApi.list_organization_invites, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling OrganizationsApi.list_organization_invites, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling OrganizationsApi.list_organization_invites, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/orgs/{org_id}/invites'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<InviteRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.list_organization_invites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#list_organization_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Organizations
    # Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<OrganizationRead>]
    def list_organizations(opts = {})
      data, _status_code, _headers = list_organizations_with_http_info(opts)
      data
    end

    # List Organizations
    # Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number of the results to fetch, starting at 1. (default to 1)
    # @option opts [Integer] :per_page The number of results per page (max 100). (default to 30)
    # @return [Array<(Array<OrganizationRead>, Integer, Hash)>] Array<OrganizationRead> data, response status code and response headers
    def list_organizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.list_organizations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling OrganizationsApi.list_organizations, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling OrganizationsApi.list_organizations, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling OrganizationsApi.list_organizations, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/orgs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationRead>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.list_organizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#list_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Organization
    # Updates the organization's profile.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param organization_update [OrganizationUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationRead]
    def update_organization(org_id, organization_update, opts = {})
      data, _status_code, _headers = update_organization_with_http_info(org_id, organization_update, opts)
      data
    end

    # Update Organization
    # Updates the organization&#39;s profile.
    # @param org_id [String] Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
    # @param organization_update [OrganizationUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationRead, Integer, Hash)>] OrganizationRead data, response status code and response headers
    def update_organization_with_http_info(org_id, organization_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrganizationsApi.update_organization"
      end
      # verify the required parameter 'organization_update' is set
      if @api_client.config.client_side_validation && organization_update.nil?
        fail ArgumentError, "Missing the required parameter 'organization_update' when calling OrganizationsApi.update_organization"
      end
      # resource path
      local_var_path = '/v2/orgs/{org_id}'.sub('{' + 'org_id' + '}', CGI.escape(org_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization_update)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationRead'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.update_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
