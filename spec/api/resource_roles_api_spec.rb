=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ResourceRolesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ResourceRolesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ResourceRolesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ResourceRolesApi' do
    it 'should create an instance of ResourceRolesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ResourceRolesApi)
    end
  end

  # unit tests for add_parent_resource_role
  # Add Parent Role
  # This endpoint is part of the role hierarchy feature.  Makes role with id &#x60;role_id&#x60; extend the role with id &#x60;parent_role_id&#x60;. In other words, &#x60;role_id&#x60; will automatically be assigned any permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **extends** &#x60;parent_role_id&#x60; or **inherits** from &#x60;parent_role_id&#x60;.  If &#x60;role_id&#x60; is already an ancestor of &#x60;parent_role_id&#x60;, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param role_id Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
  # @param parent_role_id Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ResourceRoleRead]
  describe 'add_parent_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for assign_permissions_to_resource_role
  # Assign Permissions to Role
  # Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param role_id Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
  # @param add_role_permissions 
  # @param [Hash] opts the optional parameters
  # @return [ResourceRoleRead]
  describe 'assign_permissions_to_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_resource_role
  # Create Resource Role
  # Creates a new role associated with the resource.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param resource_role_create 
  # @param [Hash] opts the optional parameters
  # @return [ResourceRoleRead]
  describe 'create_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_resource_role
  # Delete Resource Role
  # Deletes the role and all its related data. This includes any permissions granted to said role.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param role_id Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_role
  # Get Resource Role
  # Gets a single role defined on the resource, if such role exists.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param role_id Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ResourceRoleRead]
  describe 'get_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_resource_roles
  # List Resource Roles
  # Lists all the roles defined on the resource.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<ResourceRoleRead>]
  describe 'list_resource_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_parent_resource_role
  # Remove Parent Role
  # This endpoint is part of the role hierarchy feature.  Removes &#x60;parent_role_id&#x60; from the list of parent roles of role with id &#x60;role_id&#x60;. In other words, &#x60;role_id&#x60; will no longer be automatically assigned permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **not longer extends** &#x60;parent_role_id&#x60; or **no longer inherits** from &#x60;parent_role_id&#x60;.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param role_id Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
  # @param parent_role_id Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ResourceRoleRead]
  describe 'remove_parent_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_permissions_from_resource_role
  # Remove Permissions from Role
  # Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param role_id Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
  # @param remove_role_permissions 
  # @param [Hash] opts the optional parameters
  # @return [ResourceRoleRead]
  describe 'remove_permissions_from_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_resource_role
  # Update Resource Role
  # Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param role_id Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
  # @param resource_role_update 
  # @param [Hash] opts the optional parameters
  # @return [ResourceRoleRead]
  describe 'update_resource_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
