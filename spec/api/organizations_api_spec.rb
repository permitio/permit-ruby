=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::OrganizationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OrganizationsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::OrganizationsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrganizationsApi' do
    it 'should create an instance of OrganizationsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::OrganizationsApi)
    end
  end

  # unit tests for cancel_invite
  # Cancel Invite
  # Cancels an invite that was sent to a new member.
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param invite_id Id of the invite to cancel
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'cancel_invite test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_organization
  # Create Organization
  # Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
  # @param organization_create 
  # @param [Hash] opts the optional parameters
  # @return [OrganizationReadWithAPIKey]
  describe 'create_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_organization
  # Delete Organization
  # Deletes an organization (Permit.io account) and all its related data.
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_active_organization
  # Get Active Organization
  # Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
  # @param [Hash] opts the optional parameters
  # @return [OrganizationRead]
  describe 'get_active_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_organization
  # Get Organization
  # Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [OrganizationRead]
  describe 'get_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invite_members_to_organization
  # Invite Members To Organization
  # Invite new members into the organization.
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param invite_create 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inviter_name 
  # @option opts [String] :inviter_email 
  # @return [MultiInviteResult]
  describe 'invite_members_to_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_organization_invites
  # List Organization Invites
  # Lists pending organization invites
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<InviteRead>]
  describe 'list_organization_invites test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_organizations
  # List Organizations
  # Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<OrganizationRead>]
  describe 'list_organizations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_organization
  # Update Organization
  # Updates the organization&#39;s profile.
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param organization_update 
  # @param [Hash] opts the optional parameters
  # @return [OrganizationRead]
  describe 'update_organization test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
