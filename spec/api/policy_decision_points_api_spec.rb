=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PolicyDecisionPointsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PolicyDecisionPointsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PolicyDecisionPointsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyDecisionPointsApi' do
    it 'should create an instance of PolicyDecisionPointsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PolicyDecisionPointsApi)
    end
  end

  # unit tests for get_authenticating_pdp_config_values
  # Get connected PDP configuration and push state
  # Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
  # @param pdp_state_update 
  # @param [Hash] opts the optional parameters
  # @return [RemoteConfig]
  describe 'get_authenticating_pdp_config_values test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_authenticating_pdp_config_values_legacy
  # Get connected PDP configuration
  # Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
  # @param [Hash] opts the optional parameters
  # @return [RemoteConfig]
  describe 'get_authenticating_pdp_config_values_legacy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pdp_config_values
  # Get PDP configuration
  # Gets the configuration values for the PDP container with id &#x60;pdp_id&#x60;.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param pdp_id The unique id of the pdp
  # @param [Hash] opts the optional parameters
  # @return [RemoteConfig]
  describe 'get_pdp_config_values test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_pdp_configs
  # List PDP configurations
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<PDPConfigRead>]
  describe 'list_pdp_configs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rotate_pdp_api_key
  # Rotate PDP API Key
  # Rotates the API key of the PDP container with id &#x60;pdp_id&#x60;.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param pdp_id The unique id of the pdp
  # @param [Hash] opts the optional parameters
  # @return [PDPConfigRead]
  describe 'rotate_pdp_api_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
