=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ElementsConfigsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ElementsConfigsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ElementsConfigsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ElementsConfigsApi' do
    it 'should create an instance of ElementsConfigsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ElementsConfigsApi)
    end
  end

  # unit tests for create_elements_config
  # Create Elements Config
  # Creates a new elements_config under the active organization.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param elements_config_create 
  # @param [Hash] opts the optional parameters
  # @return [ElementsConfigRead]
  describe 'create_elements_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_elements_config
  # Delete Elements Config
  # Deletes the elements_config and all its related data.
  # @param elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_elements_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_elements_config
  # Get Elements Config
  # Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ElementsConfigRead]
  describe 'get_elements_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_elements_config_runtime
  # Get Elements Config Runtime
  # Gets a single elements_config matching the given elements_config_id, if such elements_config exists.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ElementsConfigRuntimeRead]
  describe 'get_elements_config_runtime test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_elements_type_config
  # Get Elements Type Config
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param element_type Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ElementsEnvTypeRead]
  describe 'get_elements_type_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_elements_configs
  # List Elements Configs
  # Lists all the elements_configs under the active organization.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [PaginatedResultElementsConfigRead]
  describe 'list_elements_configs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_elements_config
  # Update Elements Config
  # Updates the elements_config.
  # @param elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param elements_config_update 
  # @param [Hash] opts the optional parameters
  # @return [ElementsConfigRead]
  describe 'update_elements_config test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_elements_type_permissions
  # Update Elements Type Permissions
  # @param element_type Either the unique id of the elements_type, or the URL-friendly key of the elements_type (i.e: the \&quot;slug\&quot;).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param elements_env_type_update 
  # @param [Hash] opts the optional parameters
  # @return [ElementsEnvTypeRead]
  describe 'update_elements_type_permissions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
