=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ConditionSetRulesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ConditionSetRulesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ConditionSetRulesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ConditionSetRulesApi' do
    it 'should create an instance of ConditionSetRulesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ConditionSetRulesApi)
    end
  end

  # unit tests for assign_set_permissions
  # Assign Set Permissions
  # Grant permissions to a user set *on* a resource set.  If the permission is already granted, it is skipped.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param condition_set_rule_create 
  # @param [Hash] opts the optional parameters
  # @return [Array<ConditionSetRuleRead>]
  describe 'assign_set_permissions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_set_permissions
  # List Set Permissions
  # Lists the condition set rules matching the filter. - If the &#x60;user_set&#x60; filter is present, will only return the permissions set of that user set. - If the &#x60;permission&#x60; filter is present, will only return the permissions sets that equals to the queried permission. - If the &#x60;resource_set&#x60; filter is present, will only return the permissions set of that resource set.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_set optional user set filter, will only return rules where the permission is granted to this user set
  # @option opts [String] :permission optional permission filter, will only return condition set rules granting this permission
  # @option opts [String] :resource_set optional resource set filter, will only return rules where the permission is granted on this resource set
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<ConditionSetRuleRead>]
  describe 'list_set_permissions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unassign_set_permissions
  # Unassign Set Permissions
  # Revokes permissions to a user set *on* a resource set.  If the permission is not granted, it is skipped.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param condition_set_rule_remove 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'unassign_set_permissions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
