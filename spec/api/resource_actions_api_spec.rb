=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ResourceActionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ResourceActionsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ResourceActionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ResourceActionsApi' do
    it 'should create an instance of ResourceActionsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ResourceActionsApi)
    end
  end

  # unit tests for create_resource_action
  # Create Resource Action
  # Creates a new action that can affect the resource.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param resource_action_create 
  # @param [Hash] opts the optional parameters
  # @return [ResourceActionRead]
  describe 'create_resource_action test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_resource_action
  # Delete Resource Action
  # Deletes the action and all its related data. This includes any permissions granted to perform the action.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param action_id Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_resource_action test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_action
  # Get Resource Action
  # Gets a single action defined on the resource, if such action exists.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param action_id Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ResourceActionRead]
  describe 'get_resource_action test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_resource_actions
  # List Resource Actions
  # Lists all the actions defined on the resource.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<ResourceActionRead>]
  describe 'list_resource_actions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_resource_action
  # Update Resource Action
  # Partially updates the action defined on a resource. Fields that will be provided will be completely overwritten.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param resource_id Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;).
  # @param action_id Either the unique id of the action, or the URL-friendly key of the action (i.e: the \&quot;slug\&quot;).
  # @param resource_action_update 
  # @param [Hash] opts the optional parameters
  # @return [ResourceActionRead]
  describe 'update_resource_action test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
