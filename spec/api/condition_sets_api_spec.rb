=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ConditionSetsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ConditionSetsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ConditionSetsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ConditionSetsApi' do
    it 'should create an instance of ConditionSetsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ConditionSetsApi)
    end
  end

  # unit tests for create_condition_set
  # Create Condition Set
  # Creates a new condition set (can be either a user set or a resource set).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param condition_set_create 
  # @param [Hash] opts the optional parameters
  # @return [ConditionSetRead]
  describe 'create_condition_set test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_condition_set
  # Delete Condition Set
  # Deletes a condition set and all its related data. This includes any permissions granted to said condition set (i.e: any matching condition set rules).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param condition_set_id Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_condition_set test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_condition_set
  # Get Condition Set
  # Gets a single condition set, if such condition set exists.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param condition_set_id Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ConditionSetRead]
  describe 'get_condition_set test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_condition_sets
  # List Condition Sets
  # Lists all condition sets matching a filter.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [ConditionSetType] :type if provided, will return only the condition sets of the specified type. e.g: only user sets.
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<ConditionSetRead>]
  describe 'list_condition_sets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_condition_set
  # Update Condition Set
  # Partially updates a condition set. Fields that will be provided will be completely overwritten.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param condition_set_id Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \&quot;slug\&quot;).
  # @param condition_set_update 
  # @param [Hash] opts the optional parameters
  # @return [ConditionSetRead]
  describe 'update_condition_set test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
