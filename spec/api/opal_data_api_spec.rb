=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::OPALDataApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OPALDataApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::OPALDataApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OPALDataApi' do
    it 'should create an instance of OPALDataApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::OPALDataApi)
    end
  end

  # unit tests for get_all_data
  # Get All Data
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :__internal_update_cache 
  # @return [FullData]
  describe 'get_all_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_data_for_role
  # Get Data For Role
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param role_id 
  # @param [Hash] opts the optional parameters
  # @return [RoleData]
  describe 'get_data_for_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_data_for_set_rule
  # Get Data For Set Rule
  # return permission assignment data between user sets and resource sets (i.e: condition set rules data)
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param user_set_id 
  # @param resource_set_id 
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, Array<String>>]
  describe 'get_data_for_set_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_data_for_user
  # Get Data For User
  # @param org_id Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [UserData]
  describe 'get_data_for_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
