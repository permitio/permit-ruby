=begin
#Permit.io API

# Authorization as a service 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PolicyGitRepositoriesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PolicyGitRepositoriesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PolicyGitRepositoriesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyGitRepositoriesApi' do
    it 'should create an instance of PolicyGitRepositoriesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PolicyGitRepositoriesApi)
    end
  end

  # unit tests for activate_policy_repo
  # Activate Policy Repo
  # Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ProjectRead]
  describe 'activate_policy_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_policy_repo
  # Create Policy Repo
  # Creates a new policy repository configuration under a given project. The given repository is created with status &#39;pending&#39;, it will be changed and used as the &#39;active&#39; repository for the policy only after a successful attempt to use it. The repository main branch must be present in the remote.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param policy_repo_create 
  # @param [Hash] opts the optional parameters
  # @return [PolicyRepoRead]
  describe 'create_policy_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_policy_repo
  # Delete Policy Repo
  # Deletes an environment and all its related data.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_policy_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_active_policy_repo
  # Disable Active Policy Repo
  # Disable the currently active policy repo, this action means to turn off the gitops feature. If there is no active policy repo, this action will do nothing.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [ProjectRead]
  describe 'disable_active_policy_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_active_policy_repo
  # Get Active Policy Repo
  # Gets the currently active repository, if such repository exists.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [PolicyRepoRead]
  describe 'get_active_policy_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_repo
  # Get Policy Repo
  # Gets a single repository matching the given repo_id, if such repository exists.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @return [PolicyRepoRead]
  describe 'get_policy_repo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_policy_repos
  # List Policy Repos
  # Lists all the policy repositories under a given project.
  # @param proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number of the results to fetch, starting at 1.
  # @option opts [Integer] :per_page The number of results per page (max 100).
  # @return [Array<PolicyRepoRead>]
  describe 'list_policy_repos test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
